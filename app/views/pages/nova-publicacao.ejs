<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nova Publicação</title>
    <link rel="stylesheet" href="css/nova-publicacao.css">
    
    <link rel="shortcut icon" href="imagens/favicon.ico" type="image/x-icon">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet"> 


    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.css">

<!-- JS do Tagify -->
<script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify"></script>
    

    

</head>

     
<body>

    
    <%- include('../partials/menu-logado'); %>

<main>
    
            <h1 class="novaPublicacao">Nova Publicação</h1>
            <br>
            <br>
            <p class="instrucao-tipo-btn">Selecione o tipo de publicação que você deseja fazer:</p>
            <section class="button-group">
    
    
                    <button class="ativo" title="SELECIONADO - Crie uma nova publicação para seu portfólio."><a href=/nova-publicacao >Nova Publicação</a></button>
                    <button class="nao-ativo" title="Publique uma proposta de projeto para os profissionais da plataforma."><a href=/nova-publi-pedido >Proposta de projeto</a></button>
    
            </section>

            <p class="p-explicativo-np">Publique seu trabalho para compor seu portfólio.</p>
            <form  id="post-form" enctype="multipart/form-data" method="POST" action=/enviar-publicacao>
    
    <section class="colunas-form">
        
                    <section class="coluna-esq">
                        <section class="form-grupo-1" id="titulo-publicacao">
                            <label for="titulo">Título:</label> <br>
                            <input type="text" id="titulo" name="titulo" class="caixa-texto" required>
                        </section>
                        <section class="form-grupo-1" id="categoria-publicacao">
                        <label for="categoria">Categoria:</label> <br>
                        <select id="categoria" name="categoria" class="caixa-texto" required>
                            <option value="">-- Selecione a categoria --</option>
                            <option value="design_grafico">Design Gráfico</option>
                            <option value="ilustracao">Ilustração</option>
                            <option value="uiux">UI/UX</option>
                            <option value="arte_digital">Arte Digital</option>
                            <option value="arte_3d">Arte 3D</option>
        
                            <option value="animacao">Animação</option>
        
                            <option value="branding">Branding</option>
                            <option value="tipografia">Tipografia</option>
                            <option value="modelagem_3d">Modelagem 3D</option>
        
        
                            <option value="design_de_produto">Design de Produto</option>
        
                            <option value="design_editorial">Design Editorial</option>
                            <option value="design_de_jogos">Design de Jogos</option>
        
        
        
                            <option value="fotografia">Fotografia</option>
                            <option value="outro">Outros</option>
                        </select>

                        
<section id="outra-categoria-container" style="display:none; margin-top:10px;">
  <label for="outraCategoria">Digite a categoria:</label>
  <input type="text" id="outraCategoria" name="outraCategoria" placeholder="Ex: Lettering">
</section>



<script>
  const select = document.getElementById('categoria');
const container = document.getElementById('outra-categoria-container');

select.addEventListener('change', () => {
  if (select.value === 'outro') {
    container.style.display = 'block';
  } else {
    container.style.display = 'none';
  }
});

</script>
                        </section>
                         <section class="form-grupo-1" id="descricao-publicacao">
                            <label for="descricao">Descrição:</label> <br>
                            <textarea id="descricao" name="descricao" class="caixa-texto grande
                            " ></textarea>
                        </section>
                        <section class="form-grupo-1" id="tags-publicacao">
                            <label for="descricao">Tags:</label> <br>
                           <input name='input-custom-dropdown' class='tagify--custom-dropdown caixa-texto' placeholder='Escreva sua' value='css, html, javascript'>
                        </section>
                    </section>
        
                    <!-----------------colocar aquele negocio do upload---------------------->
                 <section class="coluna-dir">
  <section class="previeweinput">
   <section class="upload-wrapper">
  <label for="image-input" class="custom-file-label">Selecionar imagens <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" ><path d="M720-330q0 104-73 177T470-80q-104 0-177-73t-73-177v-370q0-75 52.5-127.5T400-880q75 0 127.5 52.5T580-700v350q0 46-32 78t-78 32q-46 0-78-32t-32-78v-370h80v370q0 13 8.5 21.5T470-320q13 0 21.5-8.5T500-350v-350q-1-42-29.5-71T400-800q-42 0-71 29t-29 71v370q-1 71 49 120.5T470-160q70 0 119-49.5T640-330v-390h80v390Z"/></svg></label>
  <input type="file" id="image-input" name="images" accept="image/*" multiple />
  <span class="image-count" id="image-count">Nenhuma imagem selecionada</span>
</section>
    <section class="preview-section" id="preview-section" style="display:none;">
      <section class="main-image-container" id="main-image-container">
        <img id="main-image" src="" alt="Main preview" />
      </section>
      <section id="thumbnail-row"></section>
    </section>
  </section>
</section>


                    
    </section>
             <!-------------------------------------------------------------------------->
            
                <section class="btn-publicar-area">
                    <button class="btn-publicar" id="prosseguir">Prosseguir</button>
                </section>


                                
                <section id="confirm-modal" >
                  <section class="dentro-modal">
                    <h2>Confirme sua publicação</h2>
                    <p><strong>Título:</strong> <span id="confirm-title"></span></p>
                    <p><strong>Categoria:</strong> <span id="confirm-category"></span></p>
                    <p><strong>Descrição:</strong> <span id="confirm-description"></span></p>
                    <p><strong>Tags:</strong> <span id="confirm-tags"></span></p>
                    
                     <p><strong>Imagens selecionadas:</strong> </p>
                    <section id="confirm-images" ></section>
                    <section class="btns-modal">
                      <button id="cancel-btn" type="button">Cancelar</button>
                      <button id="send-btn" type="submit">Enviar</button>
                    </section>
                  </section>
                </section>


            </form>









        
</main>









<script>
  const inputFile = document.getElementById('image-input');
  const previewSection = document.getElementById('preview-section');
  const mainImage = document.getElementById('main-image');
  const deleteBtn = document.getElementById('delete-btn');
  const thumbnailRow = document.getElementById('thumbnail-row');
  const imageCount = document.getElementById('image-count');

  let imageFiles = [];
  let currentIndex = 0;

  inputFile.addEventListener('change', (e) => {
    const newFiles = Array.from(e.target.files);
    imageFiles = [...imageFiles, ...newFiles];
    if (imageFiles.length > 0) {
      previewSection.style.display = 'block';
    }
    currentIndex = 0;
    displayImages();
    updateImageCount();
  });

  function displayImages() {
    thumbnailRow.innerHTML = '';

    if (imageFiles[currentIndex]) {
      const reader = new FileReader();
      reader.onload = (e) => {
        mainImage.src = e.target.result;
      };
      reader.readAsDataURL(imageFiles[currentIndex]);
    }

    imageFiles.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const thumbContainer = document.createElement('div');
        thumbContainer.classList.add('thumbnail-container');

        const img = document.createElement('img');
        img.src = e.target.result;
        img.title = "Clique para visualizar";

        img.addEventListener('click', () => {
          currentIndex = index;
          mainImage.src = e.target.result;
        });

        const delBtn = document.createElement('button');
        delBtn.classList.add('thumbnail-delete');
        delBtn.innerHTML = '&times;';
        delBtn.title = "Remover imagem";

        delBtn.addEventListener('click', (ev) => {
          ev.stopPropagation();
          imageFiles.splice(index, 1);

          if (currentIndex >= imageFiles.length) {
            currentIndex = 0;
          }

          if (imageFiles.length === 0) {
            previewSection.style.display = 'none';
            mainImage.src = '';
          }

          displayImages();
          updateImageCount();
        });

        thumbContainer.appendChild(img);
        thumbContainer.appendChild(delBtn);
        thumbnailRow.appendChild(thumbContainer);
      };
      reader.readAsDataURL(file);
    });
  }

  function updateImageCount() {
    const count = imageFiles.length;
    if (count === 0) {
      imageCount.textContent = 'Nenhuma imagem selecionada';
    } else if (count === 1) {
      imageCount.textContent = '1 imagem selecionada';
    } else {
      imageCount.textContent = `${count} imagens selecionadas`;
    }
  }

  deleteBtn.addEventListener('click', () => {
    imageFiles.splice(currentIndex, 1);
    if (currentIndex >= imageFiles.length) {
      currentIndex = 0;
    }

    if (imageFiles.length === 0) {
      previewSection.style.display = 'none';
      mainImage.src = '';
    }

    displayImages();
    updateImageCount();
  });







  let touchStartX = 0;
let touchEndX = 0;

mainImage.addEventListener('touchstart', (e) => {
  touchStartX = e.changedTouches[0].screenX;
});

mainImage.addEventListener('touchend', (e) => {
  touchEndX = e.changedTouches[0].screenX;
  handleGesture();
});

function handleGesture() {
  const swipeThreshold = 50; // Distância mínima para considerar um swipe

  if (touchEndX < touchStartX - swipeThreshold) {
    // Swipe para a esquerda (próxima imagem)
    if (currentIndex < imageFiles.length - 1) {
      currentIndex++;
      displayImages();
    }
  }

  if (touchEndX > touchStartX + swipeThreshold) {
    // Swipe para a direita (imagem anterior)
    if (currentIndex > 0) {
      currentIndex--;
      displayImages();
    }
  }
}

</script>

<%- include('../partials/rodape'); %>

<script src="js/mobile-navbar.js"></script>

<script>
var input = document.querySelector('input[name="input-custom-dropdown"]');

var colors = [
  '#7490C9', // vermelho claro
  '#969ED0',  // verde água
  '#92C4E2', // laranja suave
  '#B8D9BD', // rosa antigo
  '#9BB7CF', // azul petróleo
  '#C3E3DF', // roxo escuro
  '#C2E5F0', // laranja forte
  '#ADBCE2', // vinho
 
];

function transformTag(tagData) {
  // escolhe uma cor da lista, aleatoriamente
  var color = colors[Math.floor(Math.random() * colors.length)];
  tagData.color = color;
  tagData.style = "--tag-bg:" + color;
}

var tagify = new Tagify(input, {
  whitelist: ["A# .NET", "A# (Axiom)", "A-0 System", "A+", "A++", "ABAP", /* ... */ "Mystic Programming L"],
  maxTags: 10,
  dropdown: {
    maxItems: 20,
    classname: 'tags-look',
    enabled: 0,
    closeOnSelect: false
  },
  transformTag: transformTag
});

</script>







<script>
  // NOVAS variáveis para o modal e form, diferentes das já usadas
  const formModal = document.getElementById('post-form'); // Seu form, já deve ter id="post-form"
  const modalConfirm = document.getElementById('confirm-modal');
  const btnCancel = document.getElementById('cancel-btn');
  const btnSend = document.getElementById('send-btn');

  // Novo array para as imagens no modal (se quiser separar, mas pode usar imageFiles também se preferir)
  // Como imageFiles já existe, vamos usar um nome diferente só para garantir:
  let modalImageFiles = [...imageFiles]; // Copia do array original, ou só use imageFiles se quiser sincronizar

  // Inicializa Tagify numa variável diferente, com input que tem id diferente para evitar conflito
  // Se seu input de tags tem name="input-custom-dropdown", o seletor pode ser:
  const inputTagifyModal = document.querySelector('input[name="input-custom-dropdown"]');

  // Tagify novo, separado do antigo (que está em var tagify)
  const tagifyModal = new Tagify(inputTagifyModal, {
    whitelist: ["A# .NET", "A# (Axiom)", "A-0 System", "A+", "A++", "ABAP", /* ... */ "Mystic Programming L"],
    maxTags: 10,
    dropdown: {
      maxItems: 20,
      classname: 'tags-look',
      enabled: 0,
      closeOnSelect: false
    },
    transformTag: (tagData) => {
      const colors = [
        '#7490C9', '#969ED0', '#92C4E2', '#B8D9BD',
        '#9BB7CF', '#C3E3DF', '#C2E5F0', '#ADBCE2'
      ];
      const color = colors[Math.floor(Math.random() * colors.length)];
      tagData.color = color;
      tagData.style = "--tag-bg:" + color;
    }
  });

  // Atualiza modalImageFiles sempre que imagens mudarem no inputFile
  // Ou sincronize na hora de abrir o modal
  // Vou sincronizar direto no submit do form:

  document.getElementById('prosseguir').addEventListener('click', (event) => {
  event.preventDefault(); // impede comportamento padrão só por segurança

  // Atualiza a lista de imagens para o modal
  modalImageFiles = [...imageFiles];

  // Pega os dados do form
  const titulo = document.getElementById('titulo').value;
  let categoria = document.getElementById('categoria').value;
  const outraCategoriaInput = document.getElementById('outraCategoria');

  if (categoria === 'outro' && outraCategoriaInput.value.trim() !== '') {
    categoria = outraCategoriaInput.value.trim();
  }

  const descricao = document.getElementById('descricao').value;
  const tagsArray = tagifyModal.value.map(tag => tag.value);

  // Preenche os dados no modal
  document.getElementById('confirm-title').textContent = titulo;
  document.getElementById('confirm-category').textContent = categoria;
  document.getElementById('confirm-description').textContent = descricao;
  document.getElementById('confirm-tags').textContent = tagsArray.join(', ');

  // Imagens
  const confirmImagesDiv = document.getElementById('confirm-images');
  confirmImagesDiv.innerHTML = '';
  modalImageFiles.forEach(file => {
    const reader = new FileReader();
    reader.onload = e => {
      const img = document.createElement('img');
      img.src = e.target.result;
      img.style.width = '80px';
      img.style.height = '80px';
      img.style.objectFit = 'cover';
      confirmImagesDiv.appendChild(img);
    };
    reader.readAsDataURL(file);
  });

  modalConfirm.style.display = 'block';
});


  btnCancel.addEventListener('click', () => {
    modalConfirm.style.display = 'none';
  });

 btnSend.addEventListener('click', (event) => {
  event.preventDefault(); // Evita que o form seja enviado de forma tradicional (reload)

  // Montar FormData para enviar para backend
  const formData = new FormData();
  formData.append('titulo', document.getElementById('titulo').value);
  
  let categoria = document.getElementById('categoria').value;
  const outraCategoriaInput = document.getElementById('outraCategoria');

  if (categoria === 'outro' && outraCategoriaInput.value.trim() !== '') {
    categoria = outraCategoriaInput.value.trim();
  }

  formData.append('categoria', categoria);
  formData.append('descricao', document.getElementById('descricao').value);

  const tags = tagifyModal.value.map(tag => tag.value);
  formData.append('tags', JSON.stringify(tags));

  modalImageFiles.forEach((file) => {
    formData.append('images', file, file.name);
  });

  // Enviar via fetch
  fetch('/enviar-publicacao', {
    method: 'POST',
    body: formData,
  })
  .then(async response => {
    if (!response.ok) {
      // Tenta ler mensagem de erro JSON do backend
      const errorData = await response.json().catch(() => null);
      throw new Error(errorData?.message || 'Erro ao enviar publicação');
    }
    return response.json();
  })
  .then(data => {
    alert('Publicação enviada com sucesso!');
    modalConfirm.style.display = 'none';
    formModal.reset();
    modalImageFiles = [];
    imageFiles = [];
    previewSection.style.display = 'none';
    mainImage.src = '';
    thumbnailRow.innerHTML = '';
    imageCount.textContent = 'Nenhuma imagem selecionada';
    tagifyModal.removeAllTags();
  })
  .catch(error => {
  
  });
});

</script>

</body>
</html>


